Динамическая балансировка нагрузки агентов

Модель нагрузки
Имеется приложение, первоначально состоящее из "m" программных модулей, связанных между собой по управлению.
При выполнении приложения каждому модулю соответствует логический процесс (LP) на компьютере.
Логические процессы работают как сопрограммы - параллельно-последовательно.
Каждый LP_i стартует в момент времени t_i, последовательно выполняет инструкции модуля.
LP является нагрузкой для вычислительного ресурса (компьютера).
Величину нагрузки будем задавать вещественным числом.
Работа приложения заканчивается, когда заканчивает работу последний LP.
Структура приложения задана ориентированным нагруженным графом, в котором множество вершин соответствует множеству модулей.
Дуга в графе, идущая из вершины "a" в вершину "b", означает возможную передачу управления от модуля "a" модулю "b".
Часть вершин (множество S) имеет степень по входу, равную нулю.
Такие вершины являются начальными.
Часть вершин имеет степень по выходу, равную нулю. Каждой вершине приписана величина нагрузки.

Модель многоагентной системы (МАС)
Имеется "n" агентов.
Агенты обладают вычислительными ресурсами и взаимодействуют со средой - нагрузкой.
Агент может наблюдать среду, т.е. имеющиеся модули и их характеристики.
Агент может выполнять действия: превращать модуль в логический процесс на своём вычислительном ресурсе (и исполнять его - начинать и завершать); передавать модуль другому агенту; получать модуль от другого агента.
В любой момент времени агент может исполнять не более одного процесса.
Многоагентная система обладает структурой, изображаемой неориентированным графом: вершины соответствуют агентам; множество рёбер определяет пары агентов, имеющие возможность взаимодействовать между собой.
Распределение нагрузки - это отображение графа приложения на граф многоагентной системы, при котором один или несколько модулей передаётся одному агенту и дуги между модулями отображаются на ребра графа МАС.
Исполнение приложения многоагентной системой - процесс, начинающийся стартом в момент времени t = 0 логических процессов, соответствующих модулям из множества S, и заканчивающийся завершением (неодновременным) логических процессов, соответствующих вершинам графа нагрузки со степенью 0 по выходу.
Промежуточные LP стартуют сразу после завершения тех LP, с которыми их вершины связаны дугами (в отношении "предыдущий - последующий"), либо после назначения их на узел МАС.
Исполнение приложения начинается после завершения начального Распределения нагрузки.
Во время исполнения любого LP с вероятностью p = 0.05 может произойти отказ оборудования на узле, что потребует переноса его на другой узел (вычислять узел придётся с заново).
Динамическое перераспределение нагрузки - процесс, протекающий параллельно  процессу исполнения, начинающийся после принятия одним из агентов решения о необходимости перераспределения нагрузки, и заканчивающийся до завершения приложения.
Динамическое перераспределение нагрузки состоит из последовательных и, возможно, параллельных (в разных локальных частях графа МАС) действий по изменению отображения на граф МАС.
Перераспределение возможно только в момент завершения какого-либо LP.
Цель распределения и динамического перераспределения нагрузки - уменьшение (если возможно - минимизация) времени работы приложения

Задание
1. Разработать алгоритм распределения и динамического перераспределения нагрузки в многоагентной системе. Входными (изменяемыми) данными являются граф нагрузки и граф МАС.
2. Реализовать модель нагрузки, модель многоагентной системы.
3. Реализовать алгоритм распределения и динамического перераспределения нагрузки в многоагентной системе для совместной работы с моделями нагрузки в МАС.
4. Продемонстрировать работу алгоритма на 3-4 тестовых примерах с различными моделями нагрузки и МАС (графы нагрузки и МАС и поэтапное изменение нагрузки агентов модулями приложения). Для каждого теста определить общее время выполнения приложения.

Замечания
Агент передаёт модуль на исполнение другому агенту (связанному) в том случае, если у текущего агента произошёл сбой (p = 0.05)
Если произошёл сбой - агент перестаёт работать до конца выполнения всей программы
Граф модели нагрузки и модели многоагентной системы можно задать в виде набора правил для объектов, т.е. при создании агента 1 можно,
например, в качестве его соседей указать агента 2, агенту 2 - агентов 1, 3, 5, и т.д.
Программу не нужно делать асинхронной